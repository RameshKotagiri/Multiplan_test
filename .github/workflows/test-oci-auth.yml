name: OCI Vault Secret Retrieval

on:
  workflow_dispatch:  # Manual trigger for production testing
  push:
    branches:
      - feature/create-oci-credential-jenkins  # Add your feature branch

jobs:
  retrieve-secret:
    runs-on: arc-runner-set

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup OCI CLI
        run: |
          echo "Installing OCI CLI..."
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | \
          bash -s -- --accept-all-defaults --oci-cli-version 3.54.3
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Configure Secure Authentication
        env:
          OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_API_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_REGION }}
        run: |
          mkdir -p ~/.oci
          umask 077
          cat > ~/.oci/private_key.pem <<EOF
          -----BEGIN RSA PRIVATE KEY-----
          ${OCI_CLI_KEY_CONTENT}
          -----END RSA PRIVATE KEY-----
          EOF

          cat > ~/.oci/config <<EOF
          [DEFAULT]
          user=${OCI_CLI_USER}
          fingerprint=${OCI_CLI_FINGERPRINT}
          key_file=~/.oci/private_key.pem
          tenancy=${OCI_CLI_TENANCY}
          region=${OCI_CLI_REGION}
          EOF

      - name: Retrieve Vault Secret
        env:
          OCI_VAULT_SECRET_OCID: ${{ secrets.OCI_VAULT_SECRET_OCID }}
          OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING: "True"
        run: |
          echo "Checking access to secret..."
          if ! oci secrets secret-bundle get \
            --secret-id "$OCI_VAULT_SECRET_OCID" \
            --query "data.\"secret-name\"" \
            --raw-output >/dev/null; then
              echo "::error::Secret access denied or invalid OCID"
              exit 1
          fi

          echo "Fetching and decoding secret..."
          SECRET_CONTENT=$(oci secrets secret-bundle get \
            --secret-id "$OCI_VAULT_SECRET_OCID" \
            --query "data.\"secret-bundle-content\".content" \
            --raw-output | base64 --decode)

          if [ -z "$SECRET_CONTENT" ]; then
            echo "::error::Secret content is empty after decoding"
            exit 1
          fi

          echo "::add-mask::$SECRET_CONTENT"
          echo "secret-content=$SECRET_CONTENT" >> $GITHUB_ENV
          echo "Secret retrieved successfully"
