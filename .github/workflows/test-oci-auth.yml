name: Create TFC Project, Workspaces and Assign Team Access

on:
  workflow_dispatch:
    inputs:
      system:
        description: 'System'
        required: true
        type: string
      app:
        description: 'Application'
        required: true
        type: string
      envs:
        description: 'Environment'
        required: true
        type: string
      iteration:
        description: 'Iteration'
        required: true
        type: string
      team_name:
        description: 'Team name'
        required: true
        type: string
      sso_id:
        description: 'SSO ID'
        required: true
        type: string

jobs:
  create-resources:
    runs-on: arc-runner-set

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Create Project, Workspaces, and Assign Team Access
        env:
          TFC_TOKEN: ${{ secrets.TFC_TOKEN }}
          TFC_ORG: ${{ secrets.TFC_ORG }}
          SYSTEM: ${{ inputs.system }}
          APP: ${{ inputs.app }}
          ENVS: ${{ inputs.envs }}
          ITERATION: ${{ inputs.iteration }}
          TEAM_NAME: ${{ inputs.team_name }}
          SSO_ID: ${{ inputs.sso_id }}
        run: |
          PROJECT_NAME="oci-${SYSTEM}-${APP}"
          echo "Using Project Name: $PROJECT_NAME"

          ### Check if project already exists ###
      
          echo "Checking if project already exists..."
          existing_project_id=$(curl -s --request GET \
            --url "https://app.terraform.io/api/v2/organizations/$TFC_ORG/projects" \
            --header "Authorization: Bearer $TFC_TOKEN" \
            --header "Content-Type: application/vnd.api+json" | jq -r \
            --arg pname "$PROJECT_NAME" '.data[] | select(.attributes.name == $pname) | .id')

          if [[ -n "$existing_project_id" ]]; then
            echo "Project '$PROJECT_NAME' already exists. Failing workflow."
            exit 1
          fi

          ### Create the Project ###

          echo "Creating project: $PROJECT_NAME"
          project_response=$(curl -s --request POST \
            --url "https://app.terraform.io/api/v2/organizations/$TFC_ORG/projects" \
            --header "Authorization: Bearer $TFC_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            --data "{
              \"data\": {
                \"type\": \"projects\",
                \"attributes\": {
                  \"name\": \"$PROJECT_NAME\"
                }
              }
            }")

          project_id=$(echo "$project_response" | jq -r '.data.id')
          echo "Project created with ID: $project_id"

          ### Create workspaces and attach to project ###

          IFS=',' read -ra ENV_LIST <<< "$ENVS"
          declare -a WORKSPACE_IDS=()

          for ENV in "${ENV_LIST[@]}"; do
            WORKSPACE_NAME="oci-${SYSTEM}-${APP}-${ENV}-${ITERATION}"
            echo "Creating workspace: $WORKSPACE_NAME"

            workspace_response=$(curl -s --request POST \
              --url "https://app.terraform.io/api/v2/organizations/$TFC_ORG/workspaces" \
              --header "Authorization: Bearer $TFC_TOKEN" \
              --header "Content-Type: application/vnd.api+json" \
              --data "{
                \"data\": {
                  \"type\": \"workspaces\",
                  \"attributes\": {
                    \"name\": \"$WORKSPACE_NAME\"
                  },
                  \"relationships\": {
                    \"project\": {
                      \"data\": {
                        \"id\": \"$project_id\",
                        \"type\": \"projects\"
                      }
                    }
                  }
                }
              }")

            ws_id=$(echo "$workspace_response" | jq -r '.data.id')
            echo "Workspace created: $WORKSPACE_NAME (ID: $ws_id)"
            WORKSPACE_IDS+=("$ws_id")
          done

          ### Create Team ###

          echo "Creating team: $TEAM_NAME"
          team_response=$(curl -s --request POST \
            --url "https://app.terraform.io/api/v2/organizations/$TFC_ORG/teams" \
            --header "Authorization: Bearer $TFC_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            --data "{
              \"data\": {
                \"type\": \"teams\",
                \"attributes\": {
                  \"name\": \"$TEAM_NAME\",
                  \"visibility\" : \"organization\",
                  \"sso-team-id\": \"$SSO_ID\"
                }
              }
            }")

          echo "Team creation response:"
          echo "$team_response" | jq .

          team_id=$(echo "$team_response" | jq -r '.data.id')

          if [[ "$team_id" == "null" || -z "$team_id" ]]; then
            echo "Team creation failed."
            exit 1
          fi

          echo "Team created with ID: $team_id"

          ### Assign team write access to each workspace ###

          for ws_id in "${WORKSPACE_IDS[@]}"; do
            echo "Assigning team write access to workspace ID: $ws_id"

            assign_output=$(curl -s -w "\n%{http_code}" --request POST \
              --url "https://app.terraform.io/api/v2/team-workspaces" \
              --header "Authorization: Bearer $TFC_TOKEN" \
              --header "Content-Type: application/vnd.api+json" \
              --data "{
                \"data\": {
                  \"type\": \"team-workspaces\",
                  \"attributes\": {
                    \"access\": \"write\"
                  },
                  \"relationships\": {
                    \"workspace\": {
                      \"data\": {
                        \"id\": \"$ws_id\",
                        \"type\": \"workspaces\"
                      }
                    },
                    \"team\": {
                      \"data\": {
                        \"id\": \"$team_id\",
                        \"type\": \"teams\"
                      }
                    }
                  }
                }
              }")

            assign_status=$(echo "$assign_output" | tail -n1)
            assign_body=$(echo "$assign_output" | sed '$d')

            if [[ "$assign_status" == "201" ]]; then
              echo "Team write access assigned to $ws_id"
            else
              echo "Failed to assign team access to $ws_id. Status: $assign_status"
              echo "$assign_body"
            fi
          done
