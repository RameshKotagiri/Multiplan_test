name: Delete TFC Team by Name

on:
  workflow_dispatch:
    inputs:
      team_name:
        description: 'Name of the team to delete'
        required: true
        type: string

jobs:
  delete-team:
    runs-on: arc-runner-set

    steps:
      - name: Delete team by name
        env:
          TFC_TOKEN: ${{ secrets.TFC_TOKEN }}
          TFC_ORG: ${{ secrets.TFC_ORG }}
          TEAM_NAME: ${{ inputs.team_name }}
        run: |
          echo "Sanitizing input..."
          # Clean the team name (remove leading/trailing whitespace)
          TEAM_NAME=$(echo "$TEAM_NAME" | xargs)

          echo "Looking up team ID for '$TEAM_NAME'..."

          response=$(curl -s --request GET \
            --url "https://app.terraform.io/api/v2/organizations/$TFC_ORG/teams" \
            --header "Authorization: Bearer $TFC_TOKEN" \
            --header "Content-Type: application/vnd.api+json")

          echo "Response from team list (truncated):"
          echo "$response" | jq '.data | length'

          echo "All team names returned by API:"
          echo "$response" | jq -r '.data[] | .attributes.name'

          echo "Team names with IDs:"
          echo "$response" | jq -r '.data[] | "\(.attributes.name) => \(.id)"'

          team_id=$(echo "$response" | jq -r --arg tname "$TEAM_NAME" '.data[] | select(.attributes.name == $tname) | .id')

          if [[ -z "$team_id" || "$team_id" == "null" ]]; then
            echo "Team '$TEAM_NAME' not found."
            exit 1
          fi

          echo "Deleting team with ID: $team_id"

          curl -s --request DELETE \
            --url "https://app.terraform.io/api/v2/teams/$team_id" \
            --header "Authorization: Bearer $TFC_TOKEN" \
            --header "Content-Type: application/vnd.api+json"

          echo "Team '$TEAM_NAME' deleted successfully."
