name: Create Dummy OCI Credential in Jenkins

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  create-dummy-oci-credential:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Set dummy OCI values and dynamic credential ID
        run: |
          echo "TENANCY_ID=ocid1.tenancy.oc1..dummytenancyid1234567890" >> $GITHUB_ENV
          echo "USER_ID=ocid1.user.oc1..dummyuserid1234567890" >> $GITHUB_ENV
          echo "FINGERPRINT=12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef" >> $GITHUB_ENV
          PRIVATE_KEY_ESCAPED=$(echo -e "-----BEGIN PRIVATE KEY-----\nDUMMYKEYDATA\n-----END PRIVATE KEY-----" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "PRIVATE_KEY=$PRIVATE_KEY_ESCAPED" >> $GITHUB_ENV
          echo "REGION=us-phoenix-1" >> $GITHUB_ENV
          echo "CREDENTIAL_ID=app-team-oci-credential-$(date +%s)" >> $GITHUB_ENV

      - name: Get Jenkins CSRF crumb
        id: crumb
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
        run: |
          CRUMB_JSON=$(curl -s --user "$JENKINS_USER:$JENKINS_API_TOKEN" "$JENKINS_URL/crumbIssuer/api/json")
          echo "crumb_field=$(echo $CRUMB_JSON | jq -r .crumbRequestField)" >> $GITHUB_OUTPUT
          echo "crumb_value=$(echo $CRUMB_JSON | jq -r .crumb)" >> $GITHUB_OUTPUT

      - name: Create OCI credential in Jenkins
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          TENANCY_ID: ${{ env.TENANCY_ID }}
          USER_ID: ${{ env.USER_ID }}
          FINGERPRINT: ${{ env.FINGERPRINT }}
          PRIVATE_KEY: ${{ env.PRIVATE_KEY }}
          REGION: ${{ env.REGION }}
          CREDENTIAL_ID: ${{ env.CREDENTIAL_ID }}
          CRUMB_FIELD: ${{ steps.crumb.outputs.crumb_field }}
          CRUMB_VALUE: ${{ steps.crumb.outputs.crumb_value }}
        run: |
          echo "Creating XML payload..."
          cat <<EOF > credential.xml
          <com.oracle.cloud.baremetal.jenkins.credentials.BaremetalCloudCredentialsImpl>
            <scope>GLOBAL</scope>
            <id>$CREDENTIAL_ID</id>
            <description>OCI credential for app team</description>
            <tenantId>$TENANCY_ID</tenantId>
            <userId>$USER_ID</userId>
            <fingerprint>$FINGERPRINT</fingerprint>
            <privateKey>$PRIVATE_KEY</privateKey>
            <passPhrase></passPhrase>
            <region>$REGION</region>
            <useInstancePrincipal>false</useInstancePrincipal>
          </com.oracle.cloud.baremetal.jenkins.credentials.BaremetalCloudCredentialsImpl>
          EOF

          RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -X POST "$JENKINS_URL/credentials/store/system/domain/_/createCredentials" \
            --user "$JENKINS_USER:$JENKINS_API_TOKEN" \
            -H "Content-Type: application/xml" \
            -H "$CRUMB_FIELD: $CRUMB_VALUE" \
            --data @credential.xml)

          HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d':' -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | grep -v "HTTP_STATUS")

          echo "Response Body: $RESPONSE_BODY"
          echo "HTTP Status: $HTTP_STATUS"

          if [[ "$HTTP_STATUS" -eq 200 ]]; then
            echo "‚úÖ Successfully created OCI credential: $CREDENTIAL_ID"
          else
            echo "‚ùå Failed to create OCI credential. Status: $HTTP_STATUS"
            exit 1
          fi

      - name: Try to verify OCI credential (optional, non-blocking)
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          CREDENTIAL_ID: ${{ env.CREDENTIAL_ID }}
        run: |
          echo "üîç Attempting to verify credential $CREDENTIAL_ID (may not appear for plugin-based types)..."
          RESPONSE=$(curl -s --user "$JENKINS_USER:$JENKINS_API_TOKEN" "$JENKINS_URL/credentials/store/system/domain/_/api/json")
          echo "$RESPONSE" | jq .

          FOUND=$(echo "$RESPONSE" | jq -r ".credentials[] | select(.id == \"$CREDENTIAL_ID\") | .id")

          if [[ "$FOUND" == "$CREDENTIAL_ID" ]]; then
            echo "‚úÖ Verified: Credential '$CREDENTIAL_ID' exists in Jenkins!"
          else
            echo "‚ö†Ô∏è Warning: Credential '$CREDENTIAL_ID' not listed in API. Check Jenkins UI to confirm."
          fi
